#!/usr/bin/python
""" PN CLI {{ cmd }}-{{ cmd_dict.actions.keys()|join("/") }} """
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
#

import shlex
from ansible.module_utils.basic import AnsibleModule

DOCUMENTATION = """
---
module: pn_{{ cmd | replace("-", "_") }}
author: "Pluribus Networks (devops@pluribusnetworks.com)"
version: 2
short_description: CLI command to {{ cmd_dict.actions.keys()|join("/") }} {{ cmd }}.
description:
{%- for action,action_doc in cmd_dict.actions.iteritems() %}
  - C({{ action }}): {{ action_doc }}
{%- endfor %}
options:
  pn_cliusername:
    description:
      - Provide login username if user is not root.
    required: False
    type: str
  pn_clipassword:
    description:
      - Provide login password if user is not root.
    required: False
    type: str
  pn_cliswitch:
    description:
      - Target switch to run the CLI on.
    required: False
    type: str
  action:
    description:
      - {{ cmd }} configuration command.
    required: true
    choices: ['{{ cmd_dict.actions.keys()|join("', '") }}']
    type: str
{%- for action,action_args in cmd_dict.args.iteritems() %}
 {%- for args,args_info in action_args.iteritems() %}
  pn_{{ args | replace("-", "_") }}:
    description:
      - {{ args_info[0] }}
    required: true
  {%- if args_info[1] == "array" %}
    choices: ['{{ args_info[2] | join("', '") }}']
  {%- elif args_info[1] == "choice" %}
    choices: ['true', 'false']
  {%- else %}
    type: str
  {%- endif %}
 {%- endfor %}
{%- endfor %}
"""

EXAMPLES = """

"""

RETURN = """
command:
  description: the CLI command run on the target node.
stdout:
  description: set of responses from the {{ cmd }} command.
  returned: always
  type: list
stderr:
  description: set of error responses from the {{ cmd }} command.
  returned: on error
  type: list
changed:
  description: indicates whether the CLI caused changes on the target.
  returned: always
  type: bool
"""


def pn_cli(module):
    """
    This method is to generate the cli portion to launch the Netvisor cli.
    It parses the username, password, switch parameters from module.
    :param module: The Ansible module to fetch username, password and switch
    :return: returns the cli string for further processing
    """
    username = module.params['pn_cliusername']
    password = module.params['pn_clipassword']
    cliswitch = module.params['pn_cliswitch']
    action = module.params['action']

    cli = '/usr/bin/cli --quiet -e '

    if username and password:
        cli += '--user "%s":"%s" ' % (username, password)

    if cliswitch:
        cli += ' switch ' + cliswitch

    return cli


def run_cli(module, cli):
    """
    This method executes the cli command on the target node(s) and returns the
    output. The module then exits based on the output.
    :param cli: the complete cli string to be executed on the target node(s).
    :param module: The Ansible module to fetch command
    """
    action = module.params['action']
    cli = shlex.split(cli)
    rc, out, err = module.run_command(cli)

    # Response in JSON format
    if err:
        module.fail_json(
            command=' '.join(cli),
            stderr=err.strip(),
            msg="{{ cmd }} %s operation failed" % action,
            changed=False
        )

    if out:
        module.exit_json(
            command=' '.join(cli),
            stdout=out.strip(),
            msg="{{ cmd }} %s operation completed" % action,
            changed=True
        )

    else:
        module.exit_json(
            command=' '.join(cli),
            msg="{{ cmd }} %s operation completed" % action,
            changed=True
        )


def main():
    """ This section is for arguments parsing """
    module = AnsibleModule(
        argument_spec=dict(
            pn_cliusername=dict(required=False, type='str', no_log=True),
            pn_clipassword=dict(required=False, type='str', no_log=True),
            pn_cliswitch=dict(required=False, type='str', default='local'),
            action=dict(required=True, type='str', choices=['{{ cmd_dict.actions.keys()|join("', '") }}']),
        {%- for action,action_args in cmd_dict.args.iteritems() %}
         {%- for args,args_info in action_args.iteritems() %}
          {%- if args_info[1] == "array" %}
            pn_{{ args | replace("-", "_") }}=dict(required=True, type='str', choices=['{{ args_info[2] | join("', '") }}']),
          {%- elif args_info[1] == "choice" %}
            pn_{{ args | replace("-", "_") }}=dict(required=True, type='str', choices=['true', 'false']),
          {%- else %}
            pn_{{ args | replace("-", "_") }}=dict(required=True, type='str'),
          {%- endif %}
         {%- endfor %}
        {%- endfor %}
